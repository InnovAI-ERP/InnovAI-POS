import { useState, useEffect } from 'react';
import { useForm, Controller, useFieldArray } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Plus, Trash2, Search, Save, FileText, Send, UserPlus, PackagePlus, Eye, RotateCw, Loader2, AlertTriangle } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import { buscarContribuyente, mapearTipoIdentificacion, validarEstadoContribuyente } from '../services/haciendaService';
import { searchByDescription } from '../services/cabysService';
import { generatePDF, generateXML, downloadXML, sendInvoiceXML, generateInvoiceKey, generateConsecutiveNumber, sendInvoiceByEmail } from '../services/invoiceService';
import { CabysItem, Invoice, availableCurrencies } from '../types/invoice';
import { useUserSettings } from '../hooks/useUserSettings';
import { useClients } from '../hooks/useClients';
import { useInvoiceHistory, StoredInvoice } from '../hooks/useInvoiceHistory';
import ProductSelectorModal from '../components/ProductSelectorModal';
import NewProductModal from '../components/NewProductModal';
import InvoicePreviewModal from '../components/InvoicePreviewModal';
import { getExchangeRate } from '../services/exchangeRateService';

// Validation schema
const invoiceSchema = z.object({
  emisor: z.object({
    nombre: z.string().min(1, "El nombre es requerido"),
    identificacion: z.object({
      tipo: z.string().min(1, "El tipo de identificación es requerido"),
      numero: z.string().min(9, "La identificación debe tener al menos 9 dígitos"),
    }),
    nombreComercial: z.string().optional(),
    ubicacion: z.object({
      provincia: z.string().min(1, "La provincia es requerida"),
      canton: z.string().min(1, "El cantón es requerido"),
      distrito: z.string().min(1, "El distrito es requerido"),
      barrio: z.string().optional(),
      otrasSenas: z.string().optional(),
    }),
    telefono: z.object({
      codigoPais: z.string().min(1, "El código del país es requerido"),
      numTelefono: z.string().min(8, "El número debe tener al menos 8 dígitos"),
    }).optional(),
    correo: z.string().email("Correo electrónico inválido").optional(),
    actividadEconomica: z.string().min(1, "La actividad económica es requerida"),
  }),
  receptor: z.object({
    nombre: z.string().min(1, "El nombre es requerido"),
    identificacion: z.object({
      tipo: z.string().min(1, "El tipo de identificación es requerido"),
      numero: z.string().min(9, "La identificación debe tener al menos 9 dígitos"),
    }),
    ubicacion: z.object({
      provincia: z.string().min(1, "La provincia es requerida"),
      canton: z.string().min(1, "El cantón es requerido"),
      distrito: z.string().min(1, "El distrito es requerido"),
      barrio: z.string().optional(),
      otrasSenas: z.string().optional(),
    }).optional(),
    correo: z.string().email("Correo electrónico inválido").optional(),
  }),
  condicionVenta: z.string().min(1, "La condición de venta es requerida"),
  plazoCredito: z.string().optional(),
  medioPago: z.array(z.string()).min(1, "Al menos un medio de pago es requerido"),
  detalleServicio: z.array(z.object({
    id: z.number(),
    codigoCabys: z.string().min(1, "El código CABYS es requerido"),
    cantidad: z.number().min(0.001, "La cantidad debe ser mayor a cero"),
    unidadMedida: z.string().min(1, "La unidad de medida es requerida"),
    detalle: z.string().min(1, "El detalle es requerido"),
    precioUnitario: z.number().min(0, "El precio unitario debe ser mayor o igual a cero"),
    precioUnitarioCRC: z.number().optional(), // Campo oculto para almacenar el precio original en CRC
    descuento: z.object({
      montoDescuento: z.number().min(0, "El descuento debe ser mayor o igual a cero"),
      naturalezaDescuento: z.string().optional(),
    }).optional(),
    tieneExoneracion: z.boolean().optional().default(false),
    exoneracion: z.object({
      tipoDocumento: z.string().min(1, "El tipo de documento de exoneración es requerido"),
      numeroDocumento: z.string().min(1, "El número de documento es requerido").optional(),
      nombreInstitucion: z.string().min(1, "El nombre de la institución es requerido").optional(),
      fechaEmision: z.string().min(1, "La fecha de emisión es requerida").optional(),
      porcentajeExoneracion: z.number().min(0, "El porcentaje de exoneración debe ser mayor o igual a cero").max(100, "El porcentaje de exoneración no puede ser mayor a 100").optional(),
    }).optional(),
  })).min(1, "Debe agregar al menos un producto o servicio"),
  observaciones: z.string().optional(),
  moneda: z.string().min(1, "La moneda es requerida"),
  tipoCambio: z.number().min(0, "El tipo de cambio debe ser mayor o igual a cero"),
});

type InvoiceFormData = z.infer<typeof invoiceSchema>;

const InvoiceCreate = () => {
  const [cabysResults, setCabysResults] = useState<CabysItem[]>([]);
  const [cabysSearchTerm, setCabysSearchTerm] = useState('');
  // Eliminamos la declaración de selectedCabys ya que no se utiliza, pero mantenemos setSelectedCabys
  const [, setSelectedCabys] = useState<CabysItem | null>(null);
  const [currentLineIndex, setCurrentLineIndex] = useState<number | null>(null);
  const [isSearching, setIsSearching] = useState(false);
  const [isClientModalOpen, setIsClientModalOpen] = useState(false);
  const [isProductModalOpen, setIsProductModalOpen] = useState(false);
  const [isNewProductModalOpen, setIsNewProductModalOpen] = useState(false);
  const [isPreviewModalOpen, setIsPreviewModalOpen] = useState(false);
  const [previewInvoice, setPreviewInvoice] = useState<Invoice | null>(null);
  const [selectedClient, setSelectedClient] = useState<any>(null);
  const [hasDraft, setHasDraft] = useState(false);
  const [isLoadingExchangeRate, setIsLoadingExchangeRate] = useState(false);
  const [invalidContribuyente, setInvalidContribuyente] = useState<{estado: string, mensaje: string} | null>(null);
  const [searchingContribuyente, setSearchingContribuyente] = useState(false);

  // Verificar si hay un borrador guardado al cargar
  useEffect(() => {
    const draftInvoice = localStorage.getItem('invoiceDraft');
    setHasDraft(!!draftInvoice);
  }, []);

  // Obtener la configuración del usuario, los clientes y el historial de facturas
  const { settings, loading: loadingSettings } = useUserSettings();
  const { clients, loading: loadingClients, addClient } = useClients();
  const { addInvoice } = useInvoiceHistory();
  
  // Default form values
  const defaultValues: InvoiceFormData = {
    emisor: {
      nombre: '',
      identificacion: {
        tipo: '01', // Física por defecto
        numero: '',
      },
      nombreComercial: '',
      ubicacion: {
        provincia: '',
        canton: '',
        distrito: '',
        barrio: '',
        otrasSenas: '',
      },
      telefono: {
        codigoPais: '506',
        numTelefono: '',
      },
      correo: '',
      actividadEconomica: '',
    },
    receptor: {
      nombre: '',
      identificacion: {
        tipo: '02', // Jurídica
        numero: '',
      },
      ubicacion: {
        provincia: '',
        canton: '',
        distrito: '',
        barrio: '',
        otrasSenas: '',
      },
      correo: '',
    },
    condicionVenta: '01', // Contado
    plazoCredito: '',
    medioPago: ['01'], // Efectivo
    detalleServicio: [], // Iniciar sin líneas para agregar productos de forma más intuitiva
    observaciones: '',
    moneda: 'CRC', // Moneda por defecto: Colones
    tipoCambio: 1, // Tipo de cambio por defecto para colones
  };

  const { register, control, handleSubmit, watch, setValue, getValues, reset, formState: { errors, isSubmitting } } = useForm<InvoiceFormData>({
    resolver: zodResolver(invoiceSchema),
    defaultValues,
  });
  
  // Actualizar los datos del emisor cuando se carguen los settings
  useEffect(() => {
    if (settings && !loadingSettings) {
      console.log('Actualizando datos del emisor con settings:', settings);
      
      // Convertir los datos de settings al formato esperado por el formulario
      const emisorData = {
        nombre: settings.company_name || '',
        identificacion: {
          tipo: settings.identification_type || '01',
          numero: settings.identification_number || '',
        },
        nombreComercial: settings.commercial_name || '',
        ubicacion: {
          provincia: settings.province || '',
          canton: settings.canton || '',
          distrito: settings.district || '',
          barrio: '',
          otrasSenas: settings.address || '',
        },
        telefono: {
          codigoPais: settings.phone ? (settings.phone.split('-')[0] || '506') : '506',
          numTelefono: settings.phone ? (settings.phone.split('-')[1] || '') : '',
        },
        correo: settings.email || '',
        actividadEconomica: settings.economic_activity || '',
      };
      
      // Forzar la actualización de todos los campos del emisor
      // Primero actualizar los campos simples
      setValue('emisor.nombre', emisorData.nombre, { shouldValidate: true });
      setValue('emisor.nombreComercial', emisorData.nombreComercial, { shouldValidate: true });
      setValue('emisor.correo', emisorData.correo, { shouldValidate: true });
      setValue('emisor.actividadEconomica', emisorData.actividadEconomica, { shouldValidate: true });
      
      // Actualizar campos anidados de identificación
      setValue('emisor.identificacion.tipo', emisorData.identificacion.tipo, { shouldValidate: true });
      setValue('emisor.identificacion.numero', emisorData.identificacion.numero, { shouldValidate: true });
      
      // Actualizar campos anidados de ubicación
      setValue('emisor.ubicacion.provincia', emisorData.ubicacion.provincia, { shouldValidate: true });
      setValue('emisor.ubicacion.canton', emisorData.ubicacion.canton, { shouldValidate: true });
      setValue('emisor.ubicacion.distrito', emisorData.ubicacion.distrito, { shouldValidate: true });
      setValue('emisor.ubicacion.barrio', emisorData.ubicacion.barrio, { shouldValidate: true });
      setValue('emisor.ubicacion.otrasSenas', emisorData.ubicacion.otrasSenas, { shouldValidate: true });
      
      // Actualizar campos anidados de teléfono
      setValue('emisor.telefono.codigoPais', emisorData.telefono.codigoPais, { shouldValidate: true });
      setValue('emisor.telefono.numTelefono', emisorData.telefono.numTelefono, { shouldValidate: true });
      
      console.log('Datos del emisor actualizados correctamente');
    }
  }, [settings, loadingSettings, setValue]);

  const { fields, append, remove } = useFieldArray({
    control,
    name: 'detalleServicio',
  });

  const condicionVenta = watch('condicionVenta');
  const selectedCurrency = watch('moneda');
  
  // Actualizar el tipo de cambio cuando cambia la moneda seleccionada
  useEffect(() => {
    const updateExchangeRate = async () => {
      if (selectedCurrency) {
        setIsLoadingExchangeRate(true);
        try {
          const rate = await getExchangeRate(selectedCurrency);
          // Formatear el tipo de cambio con 5 decimales como requiere Hacienda
          const formattedRate = parseFloat(rate.toFixed(5));
          setValue('tipoCambio', formattedRate);
          
          // Convertir los precios de los productos/servicios según la moneda seleccionada
          const detalleServicio = getValues('detalleServicio');
          if (detalleServicio && detalleServicio.length > 0) {
            // Obtener el tipo de cambio actual
            const exchangeRate = formattedRate;
            
            detalleServicio.forEach((item, index) => {
              // Si existe un precio original en CRC, usarlo como base para la conversión
              const originalPriceCRC = item.precioUnitarioCRC || item.precioUnitario;
              let newPrice;
              
              // Convertir según la moneda seleccionada
              if (selectedCurrency === 'CRC') {
                newPrice = originalPriceCRC;
              } else {
                // Dividir por el tipo de cambio para convertir de CRC a otra moneda
                newPrice = originalPriceCRC / exchangeRate;
              }
              
              // Almacenar el precio original en CRC solo si no existe ya
              if (!item.precioUnitarioCRC) {
                setValue(`detalleServicio.${index}.precioUnitarioCRC`, originalPriceCRC);
              }
              
              // Actualizar el precio unitario con el convertido (redondeado a 2 decimales)
              setValue(`detalleServicio.${index}.precioUnitario`, parseFloat(newPrice.toFixed(2)));
            });
          }
        } catch (error) {
          console.error('Error al obtener el tipo de cambio:', error);
          // Establecer valores por defecto según la moneda
          if (selectedCurrency === 'CRC') {
            setValue('tipoCambio', 1);
          } else if (selectedCurrency === 'USD') {
            setValue('tipoCambio', 506.00000);
          } else if (selectedCurrency === 'EUR') {
            setValue('tipoCambio', 567.23000);
          }
        } finally {
          setIsLoadingExchangeRate(false);
        }
      }
    };
    
    updateExchangeRate();
  }, [selectedCurrency, setValue, getValues]);
  
  // Función para formatear montos según la moneda seleccionada
  const formatCurrencyWithSymbol = (amount: number, currency: string = selectedCurrency) => {
    // Determinar el símbolo de la moneda
    let symbol = '';
    if (currency === 'USD') {
      symbol = '$';
    } else if (currency === 'EUR') {
      symbol = '€';
    } else if (currency === 'CRC') {
      symbol = '₡';
    }
    
    // Formatear el número con el formato de Costa Rica
    const formattedNumber = new Intl.NumberFormat('es-CR', { 
      minimumFractionDigits: 2, 
      maximumFractionDigits: 2 
    }).format(amount);
    
    // Agregar el símbolo correspondiente
    return `${symbol}${formattedNumber}`;
  };
  
  // Search CABYS products/services
  const handleCabysSearch = async () => {
    if (!cabysSearchTerm) return;
    
    setIsSearching(true);
    try {
      const results = await searchByDescription(cabysSearchTerm);
      setCabysResults(results.cabys || []);
    } catch (error) {
      console.error('Error searching CABYS:', error);
    } finally {
      setIsSearching(false);
    }
  };
  
  // Select CABYS item
  const handleSelectCabys = (item: CabysItem) => {
    setSelectedCabys(item);
    
    if (currentLineIndex !== null) {
      setValue(`detalleServicio.${currentLineIndex}.codigoCabys`, item.codigo);
      setValue(`detalleServicio.${currentLineIndex}.detalle`, item.descripcion);
    }
    
    setCabysResults([]);
    setCabysSearchTerm('');
    setCurrentLineIndex(null);
  };
  
  // Add new line item
  const handleAddLine = () => {
    append({
      id: fields.length + 1,
      codigoCabys: '',
      cantidad: 1,
      unidadMedida: 'Sp',
      detalle: '',
      precioUnitario: 0,
      precioUnitarioCRC: 0, // Campo oculto para almacenar el precio original en CRC
      descuento: {
        montoDescuento: 0,
        naturalezaDescuento: '',
      },
    });
  };

  // Handle product selection from the saved products
  const handleProductSelected = (product: any) => {
    append({
      id: Date.now(),
      codigoCabys: product.codigoCabys,
      cantidad: product.cantidad,
      unidadMedida: product.unidadMedida,
      detalle: product.detalle,
      precioUnitario: product.precioUnitario,
      precioUnitarioCRC: product.precioUnitarioCRC,
      tieneExoneracion: false,
      descuento: {
        montoDescuento: product.descuento?.montoDescuento || 0,
        naturalezaDescuento: product.descuento?.naturalezaDescuento || ''
      },
    });
  };

  // Handle product selection from the product selector modal
  const handleProductSelect = (product: any) => {
    // Obtener el tipo de cambio actual
    const currentCurrency = getValues('moneda');
    const exchangeRate = getValues('tipoCambio');
    
    // Calcular el precio según la moneda seleccionada
    let precioUnitario = product.precioUnitario || 0;
    const precioUnitarioCRC = product.precioUnitario || 0; // Siempre guardar el precio original en CRC
    
    // Convertir el precio si la moneda no es CRC
    if (currentCurrency !== 'CRC' && exchangeRate > 0) {
      precioUnitario = parseFloat((precioUnitarioCRC / exchangeRate).toFixed(2));
    }
    
    // If there's a currently selected line index, update that line
    if (currentLineIndex !== null) {
      setValue(`detalleServicio.${currentLineIndex}.codigoCabys`, product.codigoCabys || '');
      setValue(`detalleServicio.${currentLineIndex}.detalle`, product.detalle || '');
      setValue(`detalleServicio.${currentLineIndex}.cantidad`, product.cantidad || 1);
      setValue(`detalleServicio.${currentLineIndex}.unidadMedida`, product.unidadMedida || 'Sp');
      setValue(`detalleServicio.${currentLineIndex}.precioUnitario`, precioUnitario);
      setValue(`detalleServicio.${currentLineIndex}.precioUnitarioCRC`, precioUnitarioCRC); // Campo oculto para almacenar el precio original en CRC
      setValue(`detalleServicio.${currentLineIndex}.descuento`, product.descuento || { montoDescuento: 0, naturalezaDescuento: '' });
    } else {
      // Modificar el producto antes de agregarlo
      const modifiedProduct = {
        ...product,
        precioUnitario: precioUnitario,
        precioUnitarioCRC: precioUnitarioCRC
      };
      handleProductSelected(modifiedProduct);
    }
    setCurrentLineIndex(null);
    setIsProductModalOpen(false);
  };

  // Handle saving a new product
  const handleNewProductSaved = (newProduct: any) => {
    // Add the newly created product to the current line or create a new line
    handleProductSelected({...newProduct, tieneExoneracion: false});
    setIsNewProductModalOpen(false);
  };
  
  // Remove line item
  const handleRemoveLine = (index: number) => {
    remove(index);
  };
  
  // Calculate totals for a line
  const calculateLineTotals = (index: number) => {
    const lineas = watch('detalleServicio');
    const linea = lineas[index];
    
    if (!linea) return;
    
    const cantidad = linea.cantidad || 0;
    const precio = linea.precioUnitario || 0;
    const montoDescuento = linea.descuento?.montoDescuento || 0;
    
    const montoTotal = cantidad * precio;
    const subtotal = montoTotal - montoDescuento;
    
    return {
      montoTotal,
      subtotal,
    };
  };
  
  // Función para generar vista previa de la factura
  const generatePreview = () => {
    // Verificar que haya al menos una línea de producto
    const formData = getValues();
    
    if (!formData.detalleServicio || formData.detalleServicio.length === 0 ||
        !formData.detalleServicio.some(item => item.codigoCabys && item.detalle)) {
      alert('Debe agregar al menos un producto o servicio para generar la vista previa');
      return;
    }
    
    // Verificar que el tipo de cambio sea válido según la moneda
    if (formData.moneda === 'CRC' && formData.tipoCambio !== 1) {
      alert('Para la moneda Colones (CRC), el tipo de cambio debe ser 1');
      return;
    }
    
    // Calcular detalles de servicio con impuestos y totales
    const detalleServicio = formData.detalleServicio.map((item, index) => {
      // Buscar el producto en localStorage para obtener el IVA de CABYS
      let impuestoTarifa = 13; // Valor por defecto como fallback
      
      // Intentar obtener el porcentaje de impuesto del producto
      if (item.codigoCabys) {
        // Verificar si este producto existe en localStorage
        const PRODUCTS_KEY = 'products';
        const storedProducts = localStorage.getItem(PRODUCTS_KEY);
        if (storedProducts) {
          const products = JSON.parse(storedProducts);
          // Buscar el producto por código CABYS
          const foundProduct = products.find((p: any) => p.codigoCabys === item.codigoCabys);
          if (foundProduct && foundProduct.impuesto !== undefined) {
            // Usar el impuesto específico del producto CABYS
            impuestoTarifa = foundProduct.impuesto;
          }
        }
      }
      
      // Calcular montoTotal (precio * cantidad)
      const montoTotal = item.cantidad * item.precioUnitario;
      
      // Calcular subtotal (montoTotal - descuento)
      const montoDescuento = item.descuento?.montoDescuento || 0;
      const subtotal = montoTotal - montoDescuento;
      
      // Calcular impuesto con el porcentaje correcto
      const impuestoMonto = subtotal * (impuestoTarifa / 100);
      
      // Determinar el código de tarifa según el porcentaje de impuesto
      let codigoTarifa = '08'; // Por defecto 13%
      if (impuestoTarifa === 1) codigoTarifa = '01';
      else if (impuestoTarifa === 2) codigoTarifa = '02';
      else if (impuestoTarifa === 4) codigoTarifa = '03';
      else if (impuestoTarifa === 8) codigoTarifa = '04';
      else if (impuestoTarifa === 13) codigoTarifa = '08';
      
      // Verificar si el producto tiene exoneración marcada
      let impuestoObj: any = {
        codigo: '01', // IVA
        codigoTarifa: codigoTarifa,
        tarifa: impuestoTarifa,
        monto: impuestoMonto,
      };
      
      let impuestoNetoFinal = impuestoMonto;
      
      // Si el producto tiene exoneración y se ha seleccionado un tipo de documento
      if (item.tieneExoneracion && item.exoneracion?.tipoDocumento) {
        // Establecer siempre el porcentaje de exoneración en 100%
        const porcentajeExoneracion = 100;
        const montoExoneracion = impuestoMonto; // Al ser 100%, el monto exonerado es igual al impuesto total
        
        // Actualizar el monto neto de impuesto (descontando la exoneración)
        impuestoNetoFinal = 0; // Al ser 100% de exoneración, el impuesto neto es 0
        
        // Agregar información de exoneración al objeto de impuesto
        impuestoObj.exoneracion = {
          tipoDocumento: item.exoneracion.tipoDocumento,
          numeroDocumento: item.exoneracion.numeroDocumento || 'N/A',
          nombreInstitucion: item.exoneracion.nombreInstitucion || 'N/A',
          fechaEmision: item.exoneracion.fechaEmision || new Date().toISOString().split('T')[0],
          porcentajeExoneracion: porcentajeExoneracion,
          montoExoneracion: montoExoneracion,
        };
      }
      
      return {
        ...item,
        montoTotal: montoTotal,
        subtotal: subtotal,
        impuesto: impuestoObj,
        impuestoNeto: impuestoNetoFinal,
        montoTotalLinea: subtotal + impuestoNetoFinal,
      };
    });
    
    // Calcular totales
    const subtotalTotal = detalleServicio.reduce((sum, item) => sum + item.subtotal, 0);
    const impuestoTotal = detalleServicio.reduce((sum, item) => sum + item.impuesto.monto, 0);
    const total = subtotalTotal + impuestoTotal;
    
    // Calculate invoice summary
    const totalVenta = detalleServicio.reduce((sum, item) => sum + item.montoTotal, 0);
    const totalDescuentos = detalleServicio.reduce((sum, item) => sum + (item.descuento?.montoDescuento || 0), 0);
    const totalVentaNeta = totalVenta - totalDescuentos;
    const totalImpuesto = detalleServicio.reduce((sum, item) => sum + item.impuestoNeto, 0);
    const totalComprobante = totalVentaNeta + totalImpuesto;
    
    // Crear objeto de factura/tiquete para la vista previa
    const preview: Invoice = {
      clave: generateInvoiceKey(formData.emisor.identificacion.numero, '01'),
      numeroConsecutivo: generateConsecutiveNumber('01'),
      fechaEmision: new Date().toISOString(),
      emisor: formData.emisor,
      receptor: formData.receptor,
      condicionVenta: formData.condicionVenta,
      plazoCredito: formData.plazoCredito,
      medioPago: formData.medioPago,
      detalleServicio: detalleServicio,
      resumenFactura: {
        codigoMoneda: formData.moneda,
        tipoCambio: formData.tipoCambio,
        totalServGravados: totalVentaNeta,
        totalServExentos: 0,
        totalMercGravada: 0,
        totalMercExenta: 0,
        totalGravado: totalVentaNeta,
        totalExento: 0,
        totalVenta,
        totalDescuentos,
        totalVentaNeta,
        totalImpuesto,
        totalComprobante,
      },
      otros: formData.observaciones,
    };
    
    // Guardar la vista previa y mostrar el modal
    setPreviewInvoice(preview);
    setIsPreviewModalOpen(true);
  };
  
  // Generate invoice on form submission
  // Función para guardar borrador
  const saveDraft = () => {
    const formData = getValues();
    localStorage.setItem('invoiceDraft', JSON.stringify(formData));
    setHasDraft(true);
    alert('Borrador guardado exitosamente');
  };

  // Función para cargar borrador
  const loadDraft = () => {
    const draftJson = localStorage.getItem('invoiceDraft');
    if (draftJson) {
      try {
        const draftData = JSON.parse(draftJson) as InvoiceFormData;
        // Cargar todos los campos del formulario
        Object.entries(draftData).forEach(([key, value]) => {
          if (key === 'detalleServicio') {
            // Borrar filas existentes y añadir las guardadas
            remove();
            if (Array.isArray(value) && value.length > 0) {
              value.forEach((item: any) => append(item));
            }
          } else {
            // @ts-ignore
            setValue(key, value);
          }
        });
        alert('Borrador cargado exitosamente');
      } catch (error) {
        console.error('Error al cargar el borrador:', error);
        alert('Error al cargar el borrador');
      }
    }
  };

  // Función para resetear el formulario
  const resetForm = () => {
    // Limpiar todo excepto los datos del emisor (que vienen de settings)
    if (settings) {
      // Mantener los datos del emisor de los settings
      const emisorData = {
        nombre: settings.company_name || '',
        identificacion: {
          tipo: settings.identification_type || '01',
          numero: settings.identification_number || '',
        },
        nombreComercial: settings.commercial_name || '',
        ubicacion: {
          provincia: settings.province || '',
          canton: settings.canton || '',
          distrito: settings.district || '',
          barrio: settings.neighborhood || '',
          otrasSenas: settings.address || '',
        },
        telefono: {
          codigoPais: '+506',
          numTelefono: settings.phone || '',
        },
        correo: settings.email || '',
        actividadEconomica: settings.economic_activity || '',
      };
      
      // Resetear el formulario con los valores por defecto
      remove(); // Eliminar todas las líneas de productos
      reset({
        ...defaultValues,
        emisor: emisorData,
      });
    } else {
      // Si no hay settings, usar los valores por defecto
      reset(defaultValues);
      remove();
    }
    
    // Limpiar estados adicionales
    setSelectedClient(null);
    setCabysResults([]);
    setCabysSearchTerm('');
    setCurrentLineIndex(null);
  };

  const onSubmit = async (data: InvoiceFormData) => {
    console.log('Form submitted with:', data);
    
    // Declarar invoiceStatus en el ámbito correcto
    let invoiceStatus: 'Completada' | 'Pendiente' | 'Rechazada' = 'Pendiente';
    
    try {
      // Calculate totals and prepare invoice data
      const detalleServicio = data.detalleServicio.map((item, index) => {
        // Buscar el producto en localStorage para obtener el IVA de CABYS
        let impuestoTarifa = 13; // Valor por defecto como fallback
        
        // Intentar obtener el porcentaje de impuesto del producto
        if (item.codigoCabys) {
          // Verificar si este producto existe en localStorage
          const PRODUCTS_KEY = 'products';
          const storedProducts = localStorage.getItem(PRODUCTS_KEY);
          if (storedProducts) {
            const products = JSON.parse(storedProducts);
            // Buscar el producto por código CABYS
            const foundProduct = products.find((p: any) => p.codigoCabys === item.codigoCabys);
            if (foundProduct && foundProduct.impuesto !== undefined) {
              // Usar el impuesto específico del producto CABYS
              impuestoTarifa = foundProduct.impuesto;
            }
          }
        }
        
        // Calcular montoTotal (precio * cantidad)
        const montoTotal = item.cantidad * item.precioUnitario;
        
        // Calcular subtotal (montoTotal - descuento)
        const montoDescuento = item.descuento?.montoDescuento || 0;
        const subtotal = montoTotal - montoDescuento;
        
        // Calcular impuesto con el porcentaje correcto
        const impuestoMonto = subtotal * (impuestoTarifa / 100);
        
        // Determinar el código de tarifa según el porcentaje de impuesto
        let codigoTarifa = '08'; // Por defecto 13%
        if (impuestoTarifa === 1) codigoTarifa = '01';
        else if (impuestoTarifa === 2) codigoTarifa = '02';
        else if (impuestoTarifa === 4) codigoTarifa = '03';
        else if (impuestoTarifa === 8) codigoTarifa = '04';
        else if (impuestoTarifa === 13) codigoTarifa = '08';
        
        return {
          ...item,
          montoTotal: montoTotal,
          subtotal: subtotal,
          impuesto: {
            codigo: '01', // IVA
            codigoTarifa: codigoTarifa,
            tarifa: impuestoTarifa,
            monto: impuestoMonto,
          },
          impuestoNeto: impuestoMonto,
          montoTotalLinea: subtotal + impuestoMonto,
        };
      });
      
      // Calcular totales para almacenar en el historial
      const subtotalTotal = detalleServicio.reduce((sum, item) => sum + item.subtotal, 0);
      const impuestoTotal = detalleServicio.reduce((sum, item) => sum + item.impuesto.monto, 0);
      const total = subtotalTotal + impuestoTotal;
      
      // Calculate invoice summary
      const totalVenta = detalleServicio.reduce((sum, item) => sum + item.montoTotal, 0);
      const totalDescuentos = detalleServicio.reduce((sum, item) => sum + (item.descuento?.montoDescuento || 0), 0);
      const totalVentaNeta = totalVenta - totalDescuentos;
      const totalImpuesto = detalleServicio.reduce((sum, item) => sum + item.impuestoNeto, 0);
      const totalComprobante = totalVentaNeta + totalImpuesto;
      
      // Create invoice object
      const invoice: Invoice = {
        clave: generateInvoiceKey(data.emisor.identificacion.numero),
        numeroConsecutivo: generateConsecutiveNumber(),
        fechaEmision: new Date().toISOString(),
        emisor: data.emisor,
        receptor: data.receptor,
        condicionVenta: data.condicionVenta,
        plazoCredito: data.plazoCredito,
        medioPago: data.medioPago,
        detalleServicio: detalleServicio.map(item => ({
          ...item,
          descuento: item.descuento && item.descuento.montoDescuento > 0 ? {
            ...item.descuento,
            naturalezaDescuento: item.descuento.naturalezaDescuento || 'Descuento general'
          } : undefined
        })),
        resumenFactura: {
          codigoMoneda: 'CRC',
          totalServGravados: totalVentaNeta,
          totalServExentos: 0,
          totalMercGravada: 0,
          totalMercExenta: 0,
          totalGravado: totalVentaNeta,
          totalExento: 0,
          totalVenta,
          totalDescuentos,
          totalVentaNeta,
          totalImpuesto,
          totalComprobante,
        },
        otros: data.observaciones,
      };
      
      console.log('Factura preparada:', invoice);
      
      try {
        // 1. Generar XML v4.4
        const xml = generateXML(invoice);
        console.log('XML generado correctamente');
        
        // 2. Descargar XML automáticamente
        downloadXML(xml, invoice.numeroConsecutivo);
        console.log('XML descargado correctamente');
        
        // 3. Generar y descargar PDF
        const pdf = generatePDF(invoice);
        pdf.save(`factura_${invoice.numeroConsecutivo}.pdf`);
        console.log('PDF generado y descargado correctamente');
        
        // 4. Enviar XML a Hacienda
        try {
          // Obtener token de autenticación (simulado)
          const token = 'token_simulado'; // En producción, obtener de un servicio de autenticación
          
          // En un entorno real, aquí se firmaría el XML con XAdES-BES
          const xmlFirmado = xml; // Simulamos que ya está firmado
          
          // Debido a las restricciones de CORS, en un entorno de desarrollo local,
          // simularemos una respuesta exitosa en lugar de hacer la llamada real a la API
          if (window.location.hostname === 'localhost') {
            console.log('Entorno de desarrollo detectado. Simulando envío a Hacienda...');
            // Simular respuesta exitosa después de un breve retraso
            await new Promise(resolve => setTimeout(resolve, 1000));
            console.log('Simulación de envío a Hacienda completada con éxito');
            invoiceStatus = 'Completada';
          } else {
            // En producción, realizar la llamada real a la API
            const resultado = await sendInvoiceXML({
              xmlFirmado: xmlFirmado,
              clave: invoice.clave,
              emisorTipo: data.emisor.identificacion.tipo,
              emisorNumero: data.emisor.identificacion.numero,
              token,
              sandbox: true // Usar ambiente de pruebas
            });
            
            if (resultado.success) {
              console.log('Factura enviada a Hacienda correctamente', resultado.data);
              invoiceStatus = 'Completada';
            } else {
              console.error('Error al enviar factura a Hacienda', resultado.error);
              // Aún así, marcamos como completada para desarrollo
              invoiceStatus = 'Completada';
            }
          }
        } catch (apiError) {
          console.error('Error en la comunicación con Hacienda:', apiError);
          // En desarrollo, marcamos como completada aunque haya error
          invoiceStatus = 'Completada';
        }
        
        // 5. Enviar factura por correo electrónico
        let emailStatus: StoredInvoice['emailInfo'] = undefined;
        
        // Verificar si hay un correo de receptor válido para enviar la factura
        if (data.receptor.correo) {
          try {
            const pdfBlob = pdf.output('blob'); // Obtener el PDF como Blob
            await sendInvoiceByEmail(
              data.receptor.correo,
              xml,
              pdfBlob,
              invoice.numeroConsecutivo,
              data.emisor.correo, // Correo del emisor como remitente
              data.emisor.nombre, // Nombre del emisor para personalizar el correo
              undefined, // Documento de aceptación (se añadirá cuando esté disponible)
              undefined, // CC emails
              undefined, // BCC emails
              `Factura Electrónica ${invoice.numeroConsecutivo} - ${data.emisor.nombre}`, // Asunto personalizado
              undefined, // Mensaje personalizado (se usa el predeterminado)
              data.receptor.nombre // Nombre del receptor para personalizar el correo
            );
            console.log(`Factura enviada por correo electrónico a: ${data.receptor.correo}`);
            
            // Guardar información del correo enviado exitosamente
            emailStatus = {
              destinatario: data.receptor.correo,
              fechaEnvio: new Date().toISOString(),
              estadoEnvio: 'Enviado',
              intentos: 1
            };
          } catch (emailError) {
            console.error('Error al enviar la factura por correo electrónico:', emailError);
            // Guardar información del error en el envío
            emailStatus = {
              destinatario: data.receptor.correo,
              fechaEnvio: new Date().toISOString(),
              estadoEnvio: 'Fallido',
              intentos: 1,
              mensajeError: emailError instanceof Error ? emailError.message : 'Error desconocido al enviar correo'
            };
          }
        } else {
          console.warn('No se proporcionó correo electrónico del receptor, no se enviará la factura por correo.');
        }
      } catch (processingError) {
        console.error('Error al procesar la factura:', processingError);
        throw new Error(`Error al procesar la factura: ${processingError instanceof Error ? processingError.message : 'Error desconocido'}`);
      }

      // 6. Guardar factura en el historial
      const storedInvoice: StoredInvoice = {
        id: `F-${invoice.numeroConsecutivo}`,
        client: data.receptor.nombre,
        date: new Date().toISOString(),
        amount: `₡${totalComprobante.toLocaleString()}`,
        status: invoiceStatus as 'Completada' | 'Pendiente' | 'Rechazada',
        items: data.detalleServicio.length,
        claveNumerica: invoice.clave,
        condicionVenta: data.condicionVenta,
        medioPago: data.medioPago,
        detalleServicio: data.detalleServicio.map(item => ({
          codigoCabys: item.codigoCabys,
          detalle: item.detalle,
          cantidad: item.cantidad,
          precioUnitario: item.precioUnitario,
          subtotal: (item.cantidad * item.precioUnitario) - (item.descuento?.montoDescuento || 0)
        })),
        subtotal: totalVentaNeta,
        impuesto: totalImpuesto,
        total: totalComprobante,
        xmlContent: typeof xml !== 'undefined' ? xml : '',
        // Incluir la información del correo electrónico si existe
        emailInfo: emailStatus || undefined
      };
      
      console.log('Guardando factura en el historial:', storedInvoice);
      try {
        addInvoice(storedInvoice);
        console.log('Factura guardada exitosamente en el historial');
      } catch (historyError) {
        console.error('Error al guardar la factura en el historial:', historyError);
      }
      
      // Verificar que la factura se haya guardado correctamente
      console.log('Verificando que la factura se haya guardado en el historial');
      setTimeout(() => {
        const storedInvoices = localStorage.getItem('invoices');
        if (storedInvoices) {
          const invoices = JSON.parse(storedInvoices);
          const found = invoices.some((inv: any) => inv.id === storedInvoice.id);
          console.log(`Factura ${found ? 'encontrada' : 'NO encontrada'} en el historial`);
        }
      }, 500);
      
      let alertMessage = `Factura generada exitosamente. Estado: ${invoiceStatus}. El XML y PDF se han descargado automáticamente.`;
      if (data.receptor.correo) {
        alertMessage += ` Además, se ha enviado por correo a ${data.receptor.correo}.`;
      }
      alert(alertMessage);
      
    } catch (error) {
      console.error('Error generating invoice:', error);
      alert(`Error al generar la factura: ${error instanceof Error ? error.message : 'Error desconocido'}`);
    } finally {
      // Siempre limpiar el formulario, incluso si ocurren errores
      resetForm();
      
      // Eliminar borrador si existía
      localStorage.removeItem('invoiceDraft');
      setHasDraft(false);
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl title-primary">Crear Factura Electrónica</h1>
      </div>
      
      <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
        {/* Tabs for different sections */}
        <div className="glass-card">
          <div className="border-b border-primary-500/30">
            <nav className="flex overflow-x-auto">
              {['Emisor', 'Receptor', 'Detalles', 'Producto/Servicios', 'Resumen'].map((tab, index) => (
                <button
                  key={index}
                  type="button"
                  className={`px-4 py-3 text-sm font-medium border-b-2 whitespace-nowrap ${
                    index === 0 
                      ? 'border-primary-500 text-white' 
                      : 'border-transparent text-gray-400 hover:text-white hover:border-primary-300'
                  }`}
                >
                  {tab}
                </button>
              ))}
            </nav>
          </div>
          
          <div className="p-6">
            {/* Emisor Section */}
            <div className="space-y-6">
              <h2 className="text-xl title-secondary flex items-center">
                <span className="w-6 h-6 flex items-center justify-center rounded-full bg-primary-500 text-white mr-2 text-sm">1</span>
                Información del Emisor
              </h2>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 p-4 glass-card">
                <div>
                  <label className="form-label">Nombre</label>
                  <input 
                    {...register('emisor.nombre')} 
                    className="form-input" 
                    placeholder="Nombre completo" 
                  />
                  {errors.emisor?.nombre && <p className="form-error">{errors.emisor.nombre.message}</p>}
                </div>
                
                <div className="grid grid-cols-2 gap-2">
                  <div>
                    <label className="form-label">Tipo de Identificación</label>
                    <select {...register('emisor.identificacion.tipo')} className="form-select">
                      <option value="01">Física</option>
                      <option value="02">Jurídica</option>
                      <option value="03">DIMEX</option>
                      <option value="04">NITE</option>
                    </select>
                    {errors.emisor?.identificacion?.tipo && <p className="form-error">{errors.emisor.identificacion.tipo.message}</p>}
                  </div>
                  
                  <div>
                    <label className="form-label">Número de Identificación</label>
                    <input 
                      {...register('emisor.identificacion.numero')} 
                      className="form-input" 
                      placeholder="Cédula/ID" 
                    />
                    {errors.emisor?.identificacion?.numero && <p className="form-error">{errors.emisor.identificacion.numero.message}</p>}
                  </div>
                </div>
                
                <div>
                  <label className="form-label">Nombre Comercial (Opcional)</label>
                  <input 
                    {...register('emisor.nombreComercial')} 
                    className="form-input" 
                    placeholder="Nombre comercial" 
                  />
                </div>
                
                <div>
                  <label className="form-label">Actividad Económica</label>
                  <input 
                    {...register('emisor.actividadEconomica')} 
                    className="form-input" 
                    placeholder="Código de actividad" 
                  />
                  {errors.emisor?.actividadEconomica && <p className="form-error">{errors.emisor.actividadEconomica.message}</p>}
                </div>
                
                <div className="col-span-1 md:col-span-2 grid grid-cols-1 md:grid-cols-3 gap-2">
                  <div>
                    <label className="form-label">Provincia</label>
                    <input 
                      {...register('emisor.ubicacion.provincia')} 
                      className="form-input" 
                      placeholder="Provincia" 
                    />
                    {errors.emisor?.ubicacion?.provincia && <p className="form-error">{errors.emisor.ubicacion.provincia.message}</p>}
                  </div>
                  
                  <div>
                    <label className="form-label">Cantón</label>
                    <input 
                      {...register('emisor.ubicacion.canton')} 
                      className="form-input" 
                      placeholder="Cantón" 
                    />
                    {errors.emisor?.ubicacion?.canton && <p className="form-error">{errors.emisor.ubicacion.canton.message}</p>}
                  </div>
                  
                  <div>
                    <label className="form-label">Distrito</label>
                    <input 
                      {...register('emisor.ubicacion.distrito')} 
                      className="form-input" 
                      placeholder="Distrito" 
                    />
                    {errors.emisor?.ubicacion?.distrito && <p className="form-error">{errors.emisor.ubicacion.distrito.message}</p>}
                  </div>
                </div>
                
                <div className="col-span-1 md:col-span-2">
                  <label className="form-label">Otras Señas</label>
                  <input 
                    {...register('emisor.ubicacion.otrasSenas')} 
                    className="form-input" 
                    placeholder="Dirección completa" 
                  />
                </div>
                
                <div className="grid grid-cols-2 gap-2">
                  <div>
                    <label className="form-label">Código País</label>
                    <input 
                      {...register('emisor.telefono.codigoPais')} 
                      className="form-input" 
                      placeholder="Ej: 506" 
                    />
                  </div>
                  
                  <div>
                    <label className="form-label">Teléfono</label>
                    <input 
                      {...register('emisor.telefono.numTelefono')} 
                      className="form-input" 
                      placeholder="Número de teléfono" 
                    />
                  </div>
                </div>
                
                <div>
                  <label className="form-label">Correo Electrónico</label>
                  <input 
                    {...register('emisor.correo')} 
                    className="form-input" 
                    placeholder="email@ejemplo.com" 
                  />
                  {errors.emisor?.correo && <p className="form-error">{errors.emisor.correo.message}</p>}
                </div>
              </div>
            </div>
            
            {/* Receptor Section */}
            <div className="space-y-6 mt-8">
              <h2 className="text-xl title-secondary flex items-center">
                <span className="w-6 h-6 flex items-center justify-center rounded-full bg-primary-500 text-white mr-2 text-sm">2</span>
                Información del Receptor
              </h2>
              
              <div className="grid grid-cols-1 gap-4 p-4 glass-card">
                <div className="flex justify-between items-center mb-4">
                  <label className="form-label mb-0">Seleccionar Cliente</label>
                  <button 
                    type="button"
                    onClick={() => setIsClientModalOpen(true)}
                    className="btn-primary flex items-center text-sm py-1 px-3"
                  >
                    <UserPlus className="w-4 h-4 mr-1" />
                    Nuevo Cliente
                  </button>
                </div>
                
                <div className="relative">
                  <select 
                    className="form-select w-full"
                    value={selectedClient?.id || ''}
                    onChange={(e) => {
                      const clientId = e.target.value;
                      const client = clients.find(c => c.id === clientId);
                      setSelectedClient(client);
                      
                      if (client) {
                        // Actualizar los campos del receptor con los datos del cliente
                        setValue('receptor.nombre', client.name, { shouldValidate: true });
                        setValue('receptor.identificacion.tipo', client.identification_type, { shouldValidate: true });
                        setValue('receptor.identificacion.numero', client.identification_number, { shouldValidate: true });
                        
                        if (client.province) {
                          setValue('receptor.ubicacion.provincia', client.province, { shouldValidate: true });
                        }
                        if (client.canton) {
                          setValue('receptor.ubicacion.canton', client.canton, { shouldValidate: true });
                        }
                        if (client.district) {
                          setValue('receptor.ubicacion.distrito', client.district, { shouldValidate: true });
                        }
                        if (client.address) {
                          setValue('receptor.ubicacion.otrasSenas', client.address, { shouldValidate: true });
                        }
                        if (client.email) {
                          setValue('receptor.correo', client.email, { shouldValidate: true });
                        }
                      }
                    }}
                  >
                    <option value="">Seleccione un cliente...</option>
                    {loadingClients ? (
                      <option disabled>Cargando clientes...</option>
                    ) : (
                      clients.map(client => (
                        <option key={client.id} value={client.id}>
                          {client.name} - {client.identification_type} {client.identification_number}
                        </option>
                      ))
                    )}
                  </select>
                </div>
                

                
                <div className="mt-4 p-4 border border-primary-500/30 rounded-lg">
                  <h3 className="text-sm font-medium mb-3">Datos del Receptor</h3>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="form-label">Nombre</label>
                      <input 
                        {...register('receptor.nombre')} 
                        className="form-input" 
                        placeholder="Nombre completo" 
                      />
                      {errors.receptor?.nombre && <p className="form-error">{errors.receptor.nombre.message}</p>}
                    </div>
                    
                    <div className="grid grid-cols-2 gap-2">
                      <div>
                        <label className="form-label">Tipo de Identificación</label>
                        <select {...register('receptor.identificacion.tipo')} className="form-select">
                          <option value="01">Física</option>
                          <option value="02">Jurídica</option>
                          <option value="03">DIMEX</option>
                          <option value="04">NITE</option>
                        </select>
                        {errors.receptor?.identificacion?.tipo && <p className="form-error">{errors.receptor.identificacion.tipo.message}</p>}
                      </div>
                      
                      <div>
                        <label className="form-label">Número de Identificación</label>
                        <input 
                          {...register('receptor.identificacion.numero')} 
            
            if (data.province) {
              setValue('receptor.ubicacion.provincia', data.province, { shouldValidate: true });
            }
            if (data.canton) {
              setValue('receptor.ubicacion.canton', data.canton, { shouldValidate: true });
            }
            if (data.district) {
              setValue('receptor.ubicacion.distrito', data.district, { shouldValidate: true });
            }
            if (data.address) {
              setValue('receptor.ubicacion.otrasSenas', data.address, { shouldValidate: true });
            }
            if (data.email) {
              setValue('receptor.correo', data.email, { shouldValidate: true });
            }
          }
          setIsClientModalOpen(false);
        } catch (error) {
          console.error('Error al guardar cliente:', error);
        }
      }} className="space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="form-label">Número de Identificación</label>
            <div className="flex gap-2">
              <input 
                name="identification_number" 
                id="client_identification_number"
                className="form-input" 
                placeholder="Cédula/ID" 
                required 
              />
              <button
                type="button"
                className="p-2 bg-secondary-600 rounded-md hover:bg-secondary-700 transition-colors"
                onClick={async () => {
                  const idNumberInput = document.getElementById('client_identification_number') as HTMLInputElement;
                  const idNumber = idNumberInput?.value;
                  const nameInput = document.getElementById('client_name') as HTMLInputElement;
                  const typeSelect = document.getElementById('client_identification_type') as HTMLSelectElement;
                  const errorMsgDiv = document.getElementById('client_validation_error');
                  
                  if (!idNumber || idNumber.length < 9) {
                    alert('Ingrese un número de identificación válido');
                    return;
                  }
                  
                  // Reset error message
                  if (errorMsgDiv) {
                    errorMsgDiv.innerHTML = '';
                    errorMsgDiv.style.display = 'none';
                  }
                  
                  // Limpiar estado previo
                  setInvalidContribuyente(null);
                  setSearchingContribuyente(true);
                  
                  // Mostrar indicador de carga
                  const searchButton = document.querySelector('button[type="button"]') as HTMLButtonElement;
                  if (searchButton) {
                    searchButton.disabled = true;
                    searchButton.innerHTML = '<svg class="w-4 h-4 animate-spin" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>';
                  }
                  
                  try {
                    const contribuyente = await buscarContribuyente(idNumber);
                    
                    if (contribuyente && contribuyente.nombre) {
                      // Validar el estado del contribuyente
                      const validacionEstado = validarEstadoContribuyente(contribuyente);
                      
                      if (!validacionEstado.esValido) {
                        // Mostrar error de contribuyente inválido
                        setInvalidContribuyente({
                          estado: validacionEstado.estado || 'Desconocido',
                          mensaje: validacionEstado.mensaje
                        });
                        
                        // Limpiar el nombre para que el usuario note que no hubo autocompletado
                        if (nameInput) nameInput.value = '';
                        
                        // Mostrar mensaje de error visual
                        if (errorMsgDiv) {
                          errorMsgDiv.innerHTML = `
                            <div class="flex items-start space-x-3">
                              <div class="text-red-500 mt-1">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-alert-triangle"><path d="m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z"></path><path d="M12 9v4"></path><path d="M12 17h.01"></path></svg>
                              </div>
                              <div class="flex-1">
                                <h3 class="text-red-400 font-medium text-lg">Estado inválido en Hacienda</h3>
                                <p class="text-white/80">${validacionEstado.mensaje}</p>
                                <p class="text-white/80 mt-2 font-bold">El ID consultado no está inscrito ante Hacienda</p>
                              </div>
                            </div>
                          `;
                          errorMsgDiv.style.display = 'block';
                        } else {
                          alert('No se encontró información del contribuyente. El ID consultado no está inscrito ante Hacienda');
                        }
                        return;
                      }
                      
                      // Si es válido, continuar con el proceso normal
                      if (nameInput) nameInput.value = contribuyente.nombre;
                      if (typeSelect) typeSelect.value = mapearTipoIdentificacion(contribuyente.tipoIdentificacion);
                    } else {
                      // Mostrar mensaje de error más específico en la interfaz
                      if (errorMsgDiv) {
                        errorMsgDiv.innerHTML = `
                          <div class="flex items-start space-x-3">
                            <div class="text-red-500 mt-1">
                              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-alert-triangle"><path d="m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z"></path><path d="M12 9v4"></path><path d="M12 17h.01"></path></svg>
                            </div>
                            <div class="flex-1">
                              <h3 class="text-red-400 font-medium text-lg">Cliente no encontrado</h3>
                              <p class="text-white/80">No se encontró información del contribuyente en la base de datos de Hacienda</p>
                              <p class="text-white/80 mt-2 font-bold">El ID consultado no está inscrito ante Hacienda</p>
                            </div>
                          </div>
                        `;
                        errorMsgDiv.style.display = 'block';
                      } else {
                        alert('No se encontró información del contribuyente. El ID consultado no está inscrito ante Hacienda');
                      }
                    }
                  } catch (error) {
                    console.error('Error al buscar el contribuyente:', error);
                    alert('Error al buscar el contribuyente');
                  } finally {
                    // Restaurar botón
                    setSearchingContribuyente(false);
                    if (searchButton) {
                      searchButton.disabled = false;
                      searchButton.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-4 h-4"><circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line></svg>';
                    }
                  }
                }}
              >
                <Search className="w-4 h-4" />
              </button>
            </div>
          </div>
          
          <div>
            <label className="form-label">Nombre/Razón Social</label>
            <input name="name" id="client_name" className="form-input" required />
          </div>

          <div>
            <label className="form-label">Tipo de Identificación</label>
            <select name="identification_type" id="client_identification_type" className="form-select" required>
              <option value="">Seleccione...</option>
              <option value="01">Física</option>
              <option value="02">Jurídica</option>
              <option value="03">DIMEX</option>
              <option value="04">NITE</option>
            </select>
          </div>

          <div>
            <label className="form-label">Correo Electrónico</label>
            <input name="email" type="email" className="form-input" />
          </div>

          <div>
            <label className="form-label">Teléfono</label>
            <input name="phone" className="form-input" />
          </div>

          <div>
            <label className="form-label">Provincia</label>
            <input name="province" className="form-input" />
          </div>

          <div>
            <label className="form-label">Cantón</label>
            <input name="canton" className="form-input" />
          </div>

          <div>
            <label className="form-label">Distrito</label>
            <input name="district" className="form-input" />
          </div>

          <div className="md:col-span-2">
            <label className="form-label">Dirección Completa</label>
            <input name="address" className="form-input" />
          </div>
        </div>

        <div id="client_validation_error" className="col-span-1 md:col-span-2 glass-card bg-red-500/20 border border-red-500/30 p-4 rounded-lg mb-4" style={{ display: 'none' }}></div>

        {invalidContribuyente && (
          <div className="col-span-1 md:col-span-2 glass-card bg-red-500/20 border border-red-500/30 p-4 rounded-lg mb-4 flex items-start space-x-3">
            <div className="text-red-500 mt-1">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" className="lucide lucide-alert-triangle"><path d="m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z"></path><path d="M12 9v4"></path><path d="M12 17h.01"></path></svg>
            </div>
            <div className="flex-1">
              <h3 className="text-red-400 font-medium text-lg">Estado inválido en Hacienda</h3>
              <p className="text-white/80">{invalidContribuyente.mensaje}</p>
              <p className="text-white/80 mt-2 font-bold">El ID consultado no está inscrito ante Hacienda</p>
            </div>
          </div>
        )}

        <div className="flex justify-end space-x-3 mt-6">
          <button
            type="button"
            onClick={() => setIsClientModalOpen(false)}
            className="btn-ghost"
          >
            Cancelar
          </button>
          <button type="submit" className="btn-primary">
            Guardar Cliente
          </button>
        </div>
      </form>
                             } else {
                               // Mostrar mensaje de error más específico en la interfaz
                               if (errorMsgDiv) {
                                 errorMsgDiv.innerHTML = `
                                   <div class="flex items-start space-x-3">
                                     <div class="text-red-500 mt-1">
                                       <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-alert-triangle"><path d="m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z"></path><path d="M12 9v4"></path><path d="M12 17h.01"></path></svg>
                                     </div>
                                     <div class="flex-1">
                                       <h3 class="text-red-400 font-medium text-lg">Cliente no encontrado</h3>
                                       <p class="text-white/80">No se encontró información del contribuyente en la base de datos de Hacienda</p>
                                       <p class="text-white/80 mt-2 font-bold">El ID consultado no está inscrito ante Hacienda</p>
                                     </div>
                                   </div>
                                 `;
                                 errorMsgDiv.style.display = 'block';
                               } else {
                                 alert('No se encontró información del contribuyente. El ID consultado no está inscrito ante Hacienda');
                               }
                             }
                          } catch (error) {
                            console.error('Error al buscar el contribuyente:', error);
                            alert('Error al buscar el contribuyente');
                          } finally {
                            // Restaurar botón
                            setSearchingContribuyente(false);
                            if (searchButton) {
                              searchButton.disabled = false;
                              searchButton.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-4 h-4"><circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line></svg>';
                            }
                          }
                        }}
                      >
                        <Search className="w-4 h-4" />
                      </button>
                    </div>
                  </div>
                  
                  <div>
                    <label className="form-label">Nombre/Razón Social</label>
                    <input name="name" id="client_name" className="form-input" required />
                  </div>

                  <div>
                    <label className="form-label">Tipo de Identificación</label>
                    <select name="identification_type" id="client_identification_type" className="form-select" required>
                      <option value="">Seleccione...</option>
                      <option value="01">Física</option>
                      <option value="02">Jurídica</option>
                      <option value="03">DIMEX</option>
                      <option value="04">NITE</option>
                    </select>
                  </div>

                  <div>
                    <label className="form-label">Correo Electrónico</label>
                    <input name="email" type="email" className="form-input" />
                  </div>

                  <div>
                    <label className="form-label">Teléfono</label>
                    <input name="phone" className="form-input" />
                  </div>

                  <div>
                    <label className="form-label">Provincia</label>
                    <input name="province" className="form-input" />
                  </div>

                  <div>
                    <label className="form-label">Cantón</label>
                    <input name="canton" className="form-input" />
                  </div>

                  <div>
                    <label className="form-label">Distrito</label>
                    <input name="district" className="form-input" />
                  </div>

                  <div className="md:col-span-2">
                    <label className="form-label">Dirección Completa</label>
                    <input name="address" className="form-input" />
                  </div>
                </div>

                <div className="flex justify-end space-x-3 mt-6">
                  <button
                    type="button"
                    onClick={() => setIsClientModalOpen(false)}
                    className="btn-ghost"
                  >
                    Cancelar
                  </button>
                  <button type="submit" className="btn-primary">
                    Guardar Cliente
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}
      
      {/* Modal para seleccionar productos guardados */}
      <ProductSelectorModal 
        isOpen={isProductModalOpen}
        onClose={() => {
          setIsProductModalOpen(false);
          setCurrentLineIndex(null);
        }}
        onSelect={(product) => handleProductSelect(product)}
      />

      <NewProductModal
        isOpen={isNewProductModalOpen}
        onClose={() => setIsNewProductModalOpen(false)}
        onSave={(product) => handleNewProductSaved(product)}
      />

      {/* Modal de vista previa de la factura */}
      <InvoicePreviewModal 
        isOpen={isPreviewModalOpen}
        onClose={() => setIsPreviewModalOpen(false)}
        invoice={previewInvoice}
      />
    </div>
  );
}

export default InvoiceCreate;
